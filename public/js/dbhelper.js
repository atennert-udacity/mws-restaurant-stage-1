class DBHelper{static get BACKEND_URL(){return"http://localhost:1337/"}static get _restaurantsStore(){return"restaurants"}static get _reviewsStore(){return"reviews"}static get _outbox(){return"outbox"}static get database(){if(DBHelper._database)return Promise.resolve(DBHelper._database);return new Promise((e,t)=>{const r=indexedDB.open("restaurant-reviews",1);r.onerror=(()=>t()),r.onupgradeneeded=(()=>{const e=r.result,t=e.createObjectStore(DBHelper._restaurantsStore,{keyPath:"id"}),a=e.createObjectStore(DBHelper._reviewsStore,{keyPath:"id"}),s=e.createObjectStore(DBHelper._outbox,{autoIncrement:!0});t.createIndex("by-id","id"),a.createIndex("by-restaurant","restaurant_id"),s.createIndex("by-restaurant","restaurant_id")}),r.onsuccess=(t=>{DBHelper._database=r.result,e(DBHelper._database)})})}static getDbRestaurants(e){return DBHelper.database.then(t=>{const r=t.transaction(DBHelper._restaurantsStore,"readonly").objectStore(DBHelper._restaurantsStore);return e?r.getAll(~~e):r.getAll()}).then(e=>new Promise(t=>{e.onsuccess=(()=>t(e.result))})).catch(()=>{console.warn(`encountered database problem when trying to find restaurant ${e}`)})}static getDbReviews(e){return DBHelper.database.then(t=>{const r=t.transaction(DBHelper._reviewsStore,"readonly"),a=t.transaction(DBHelper._outbox,"readonly"),s=r.objectStore(DBHelper._reviewsStore),n=a.objectStore(DBHelper._outbox),o=s.index("by-restaurant"),l=n.index("by-restaurant");return Promise.all([o,l].map(t=>new Promise(r=>{const a=e?t.getAll(~~e):t.getAll();a.onsuccess=(()=>r(a.result))})))}).then(([e,t])=>[...e,...t]).catch(t=>{console.warn(`encountered database problem when trying to find reviews for restaurant ${e}`,t.message)})}static setDbData(e,t){return DBHelper.database.then(r=>{const a=r.transaction(e,"readwrite").objectStore(e);t.forEach(e=>{a.put(e)})}).catch(r=>{console.warn(`encountered database problem when trying to set ${e} ${t}`,r.message)})}static fetchRestaurants(e,t=""){let r=e;DBHelper.getDbRestaurants(t).then(e=>{e&&e.length>0&&(r(null,e),r=(()=>{}))}).then(()=>fetch(`${DBHelper.BACKEND_URL}restaurants/${t}`)).then(e=>e.json()).then(e=>{Array.isArray(e)||(e=[e]),e.forEach(DBHelper.fixRestaurantImage),DBHelper.setDbData(DBHelper._restaurantsStore,e),r(null,e)}).catch(e=>{const t=`Request failed. ${e.message}`;r(t,null)})}static fixRestaurantImage(e){return e.photograph?e.photograph=`${e.photograph}.jpg`:e.photograph="no-img.svg",e.photo_title=`${e.name} restaurant - ${e.neighborhood}`,e}static fetchReviews(e,t){let r=e;DBHelper.getDbReviews(t).then(e=>{e&&e.length>0&&(r(e),r=(()=>{}))}).then(()=>fetch(`${DBHelper.BACKEND_URL}reviews/?restaurant_id=${t}`)).then(e=>e.json()).then(e=>{Array.isArray(e)||(e=[e]),DBHelper.setDbData(DBHelper._reviewsStore,e),r(e)}).catch(e=>{console.error(`Request failed. ${e.message}`),r([])})}static fetchRestaurantById(e,t){DBHelper.fetchRestaurants((r,a)=>{if(r)t(r,null);else{const r=a.find(t=>t.id==e);r?t(null,r):t("Restaurant does not exist",null)}},e)}static fetchRestaurantByCuisine(e,t){DBHelper.fetchRestaurants((r,a)=>{if(r)t(r,null);else{const r=a.filter(t=>t.cuisine_type==e);t(null,r)}})}static fetchRestaurantByNeighborhood(e,t){DBHelper.fetchRestaurants((r,a)=>{if(r)t(r,null);else{const r=a.filter(t=>t.neighborhood==e);t(null,r)}})}static fetchRestaurantByCuisineAndNeighborhood(e,t,r){DBHelper.fetchRestaurants((a,s)=>{if(a)r(a,null);else{let a=s;"all"!=e&&(a=a.filter(t=>t.cuisine_type==e)),"all"!=t&&(a=a.filter(e=>e.neighborhood==t)),r(null,a)}})}static fetchNeighborhoods(e){DBHelper.getDbRestaurants().then(t=>{const r=t.map(e=>e.neighborhood),a=r.filter((e,t)=>r.indexOf(e)==t);e(null,a)}).catch(t=>e(t,null))}static fetchCuisines(e){DBHelper.getDbRestaurants().then(t=>{const r=t.map(e=>e.cuisine_type),a=r.filter((e,t)=>r.indexOf(e)===t);e(null,a)}).catch(t=>e(t,null))}static urlForRestaurant(e){return`./restaurant.html?id=${e.id}`}static imageUrlForRestaurant(e){return`/img/${e.photograph}`}static mapMarkerForRestaurant(e,t){return new google.maps.Marker({position:e.latlng,title:e.name,url:DBHelper.urlForRestaurant(e),map:t,animation:google.maps.Animation.DROP})}static setRestaurantAsFavorite(e,t){fetch(`${DBHelper.BACKEND_URL}restaurants/${e}/?is_favorite=${t}`,{method:"PUT"}).then(e=>e.json()).then(e=>{const t=DBHelper.fixRestaurantImage(e);DBHelper.setDbData(DBHelper._restaurantsStore,[t])}).catch(e=>{console.error(`Request failed. ${e.message}`)})}static addToOutbox(e){return DBHelper.setDbData(DBHelper._outbox,[e])}static onSendReview(e,t){return DBHelper.addToOutbox(e).then(()=>navigator.serviceWorker.ready).then(e=>e.sync.register("send-messages")).catch(r=>{DBHelper.removeMessagesFromOutbox(),DBHelper.sendReviewsToServer([e]).then(()=>t())}).catch(e=>console.error(e.message))}static sendReviewsToServer(e){return fetch("http://localhost:1337/reviews/",{method:"post",body:JSON.stringify(e)}).then(e=>e.json()).then(e=>{DBHelper.setDbData(DBHelper._reviewsStore,[e])})}static removeMessagesFromOutbox(){return DBHelper.database.then(e=>{return e.transaction(DBHelper._outbox,"readwrite").objectStore(DBHelper._outbox).clear()}).then(e=>new Promise(t=>{e.onsuccess=(()=>t())})).catch(()=>console.warn("encountered database problem when trying to delete outbox contents"))}}