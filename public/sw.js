const staticCacheName="atennert-restaurant-v1",contentImgsCache="atennert-restaurant-content-imgs",allCaches=[staticCacheName,contentImgsCache];let _database=void 0;function serveImage(e){const t=fetch(e.request);return e.waitUntil(t.then(t=>{const s=t.clone();caches.open(contentImgsCache).then(t=>t.put(e.request,s))})),caches.match(e.request).then(e=>e||t)}self.addEventListener("install",e=>{e.waitUntil(caches.open(staticCacheName).then(e=>e.addAll(["/index.html","/restaurant.html","/js/main.js","/js/restaurant_info.js","/js/dbhelper.js","/js/register_sw.js","/manifest.json","/worker.js"])))}),self.addEventListener("activate",e=>{e.waitUntil(caches.keys().then(e=>Promise.all(e.filter(e=>e.startsWith("atennert-restaurant-")&&!allCaches.includes(e)).map(e=>caches.delete(e)))))}),self.addEventListener("fetch",e=>{const t=new URL(e.request.url);if(t.origin===location.origin){if("/"===t.pathname)return void e.respondWith(caches.match("/index.html"));if(t.pathname.startsWith("/img/"))return void e.respondWith(serveImage(e))}e.respondWith(caches.open(staticCacheName).then(t=>t.match(e.request.url).then(s=>s||fetch(e.request).then(s=>s&&200===s.status&&"basic"===s.type?(t.put(e.request.url,s.clone()),s):s))))}),self.addEventListener("sync",e=>{"send-messages"===e.tag&&e.waitUntil(getMessagesFromOutbox().then(e=>Promise.all(e.map(e=>sendReviewsToServer(e)))).then(()=>removeMessagesFromOutbox()).then(()=>{this.clients.matchAll().then(e=>{e.forEach(e=>e.postMessage("updateReviews"))})}))}),sendReviewsToServer=(e=>fetch("http://localhost:1337/reviews/",{method:"post",body:JSON.stringify(e)}).then(e=>e.json()).then(e=>{setDbData("reviews",[e])})),getMessagesFromOutbox=(()=>database().then(e=>{return e.transaction("outbox","readonly").objectStore("outbox").getAll()}).then(e=>new Promise(t=>{e.onsuccess=(()=>t(e.result))})).catch(e=>(console.warn("encountered database problem when trying to get outbox contents",e.message),[]))),removeMessagesFromOutbox=(()=>database().then(e=>{return e.transaction("outbox","readwrite").objectStore("outbox").clear()}).then(e=>new Promise(t=>{e.onsuccess=(()=>t())})).catch(e=>console.warn("encountered database problem when trying to delete outbox contents",e.message))),setDbData=((e,t)=>database().then(s=>{const a=s.transaction(e,"readwrite").objectStore(e);t.forEach(e=>{a.put(e)})}).catch(()=>{console.warn(`encountered database problem when trying to set ${e} ${t}`)})),database=(()=>{if(_database)return Promise.resolve(_database);return new Promise((e,t)=>{const s=indexedDB.open("restaurant-reviews",1);s.onerror=(()=>t()),s.onsuccess=(t=>{_database=s.result,e(_database)})})});